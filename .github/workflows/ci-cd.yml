name: TaskTphere CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: "20.11.0"

jobs:
  # Lint and format check
  lint-and-format:
    name: Lint & Format Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "yarn"

      - name: Install backend dependencies
        working-directory: ./backend
        run: yarn install --frozen-lockfile

      - name: Run ESLint
        working-directory: ./backend
        run: yarn lint

      - name: Check Prettier formatting
        working-directory: ./backend
        run: yarn format:check

      - name: TypeScript type check
        working-directory: ./backend
        run: yarn typecheck

  # Backend build and test
  backend-build:
    name: Backend Build & Test
    runs-on: ubuntu-latest
    needs: lint-and-format

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "yarn"
          cache-dependency-path: "backend/yarn.lock"

      - name: Install dependencies
        working-directory: ./backend
        run: yarn install --frozen-lockfile

      - name: Build backend
        working-directory: ./backend
        run: yarn build

      - name: Run tests
        working-directory: ./backend
        run: yarn test

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        if: matrix.node-version == '20.x'
        with:
          name: backend-build
          path: ./backend/dist
          retention-days: 7

  # Docker build test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: lint-and-format

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          target: production
          push: false
          tags: tasktphere-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm -d --name test-backend -p 3000:3000 \
            -e NODE_ENV=test \
            -e JWT_SECRET=test-secret \
            -e JWT_REFRESH_SECRET=test-refresh-secret \
            tasktphere-backend:test

          # Wait for container to start
          sleep 10

          # Test health endpoint
          curl -f http://localhost:3000/health || exit 1

          # Stop container
          docker stop test-backend

  # Security audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: lint-and-format

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "yarn"
          cache-dependency-path: "backend/yarn.lock"

      - name: Install dependencies
        working-directory: ./backend
        run: yarn install --frozen-lockfile

      - name: Run security audit
        working-directory: ./backend
        run: yarn audit --level moderate

  # Dependency check
  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "yarn"
          cache-dependency-path: "backend/yarn.lock"

      - name: Check for outdated dependencies
        working-directory: ./backend
        run: yarn outdated || true

      - name: License check
        working-directory: ./backend
        run: |
          yarn global add license-checker
          license-checker --summary

  # Deployment job (only on main branch)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [backend-build, docker-build, security-audit]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          target: production
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/backend:latest
            ghcr.io/${{ github.repository }}/backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy notification
        run: |
          echo "ðŸš€ Deployment completed successfully!"
          echo "Backend image: ghcr.io/${{ github.repository }}/backend:${{ github.sha }}"
